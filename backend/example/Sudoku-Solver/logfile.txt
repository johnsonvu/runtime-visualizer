Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.7773438 MiB  11.7773438 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.7773438 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.7773438 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.7773438 MiB  11.7773438 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.1523438 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    23  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    24                             	def __init__(self, num):
    25  11.9296875 MiB   0.0000000 MiB   		self.value = int(num)
    26  11.9296875 MiB   0.0000000 MiB   		self.options = set() if self.value else set(range(1,10))


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    75  11.7773438 MiB  11.7773438 MiB   	@profile(precision=7,stream=fp)
    76                             	def load_board(self, board):
    77                             		"""
    78                             		Load a board from a list of strings.
    79                             		"""
    80  11.7773438 MiB   0.0000000 MiB   		if not board:
    81                             			return None
    82  11.7773438 MiB   0.0000000 MiB   		if len(board) < 9:
    83                             			return None
    84                             
    85  11.7773438 MiB   0.0000000 MiB   		sboard = []
    86  11.9296875 MiB   0.0000000 MiB   		for r in range(9):
    87  11.9296875 MiB   0.1523438 MiB   			sboard.append([Square(s) for s in re.sub('\s+', '', board[r])])
    88  11.9296875 MiB   0.0000000 MiB   		return sboard


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    60  11.7773438 MiB  11.7773438 MiB   	@profile(precision=7,stream=fp)
    61                             	def __init__(self, initial_state=None):
    62  11.9296875 MiB   0.1523438 MiB   		self.rows = self.load_board(initial_state)
    63                             
    64  11.9296875 MiB   0.0000000 MiB   		if not self.rows:
    65                             			self.rows = [[Square(int(0)) for s in range(9)] for row in range(9)]
    66                             
    67                             		# index cols
    68  11.9296875 MiB   0.0000000 MiB   		self.cols = []
    69  11.9296875 MiB   0.0000000 MiB   		for c in range(9):
    70  11.9296875 MiB   0.0000000 MiB   			self.cols.append([])
    71  11.9296875 MiB   0.0000000 MiB   			for r in range(9):
    72  11.9296875 MiB   0.0000000 MiB   				self.cols[c].append(self.rows[r][c])


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145  11.9296875 MiB   0.0000000 MiB   				return options
   146                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145  11.9296875 MiB   0.0000000 MiB   				return options
   146                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   178  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   179                             	def _update_options(self, pri_dir, sec_dir, selected, pri_min, sec_min):
   180                             		"""
   181                             		Helper function for find_isolated_lines.  Updates the options for other
   182                             		rows/cols aligned with the isolated row/col that was identified by
   183                             		find_isolated_lines.
   184                             		"""
   185  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   186                             
   187  11.9296875 MiB   0.0000000 MiB   		restricted_options = set()
   188  11.9296875 MiB   0.0000000 MiB   		for sec_index in range(sec_min,sec_min+3):
   189  11.9296875 MiB   0.0000000 MiB   			restricted_options |= self.find_options_for(
   190  11.9296875 MiB   0.0000000 MiB   					selected, sec_index, pri_dir)
   191                             
   192                             		# get the other (row/col) of cubes that share this cubes (row/col)
   193  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s", self)
   194  11.9296875 MiB   0.0000000 MiB   		for p in ifilter(lambda i: i < sec_min or i > sec_min+2, range(9)):
   195  11.9296875 MiB   0.0000000 MiB   			square = sec_dir[p][selected]
   196  11.9296875 MiB   0.0000000 MiB   			if not square:
   197  11.9296875 MiB   0.0000000 MiB   				d =  "cols" if (pri_dir == self.rows) else "rows"
   198  11.9296875 MiB   0.0000000 MiB   				log.debug("Removing %s from %s %d" % (
   199  11.9296875 MiB   0.0000000 MiB   						restricted_options, d, selected))
   200  11.9296875 MiB   0.0000000 MiB   				square.options -= restricted_options
   201  11.9296875 MiB   0.0000000 MiB   				if square.check():
   202                             					solved_count += 1
   203  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   178  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   179                             	def _update_options(self, pri_dir, sec_dir, selected, pri_min, sec_min):
   180                             		"""
   181                             		Helper function for find_isolated_lines.  Updates the options for other
   182                             		rows/cols aligned with the isolated row/col that was identified by
   183                             		find_isolated_lines.
   184                             		"""
   185  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   186                             
   187  11.9296875 MiB   0.0000000 MiB   		restricted_options = set()
   188  11.9296875 MiB   0.0000000 MiB   		for sec_index in range(sec_min,sec_min+3):
   189  11.9296875 MiB   0.0000000 MiB   			restricted_options |= self.find_options_for(
   190  11.9296875 MiB   0.0000000 MiB   					selected, sec_index, pri_dir)
   191                             
   192                             		# get the other (row/col) of cubes that share this cubes (row/col)
   193  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s", self)
   194  11.9296875 MiB   0.0000000 MiB   		for p in ifilter(lambda i: i < sec_min or i > sec_min+2, range(9)):
   195  11.9296875 MiB   0.0000000 MiB   			square = sec_dir[p][selected]
   196  11.9296875 MiB   0.0000000 MiB   			if not square:
   197  11.9296875 MiB   0.0000000 MiB   				d =  "cols" if (pri_dir == self.rows) else "rows"
   198  11.9296875 MiB   0.0000000 MiB   				log.debug("Removing %s from %s %d" % (
   199  11.9296875 MiB   0.0000000 MiB   						restricted_options, d, selected))
   200  11.9296875 MiB   0.0000000 MiB   				square.options -= restricted_options
   201  11.9296875 MiB   0.0000000 MiB   				if square.check():
   202                             					solved_count += 1
   203  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164  11.9296875 MiB   0.0000000 MiB   					solitary_rows.add(r)
   165  11.9296875 MiB   0.0000000 MiB   					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168  11.9296875 MiB   0.0000000 MiB   			solved_count += self._update_options(self.rows, self.cols, 
   169  11.9296875 MiB   0.0000000 MiB   					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172  11.9296875 MiB   0.0000000 MiB   			solved_count += self._update_options(self.cols, self.rows, 
   173  11.9296875 MiB   0.0000000 MiB   					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164  11.9296875 MiB   0.0000000 MiB   					solitary_rows.add(r)
   165  11.9296875 MiB   0.0000000 MiB   					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   178  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   179                             	def _update_options(self, pri_dir, sec_dir, selected, pri_min, sec_min):
   180                             		"""
   181                             		Helper function for find_isolated_lines.  Updates the options for other
   182                             		rows/cols aligned with the isolated row/col that was identified by
   183                             		find_isolated_lines.
   184                             		"""
   185  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   186                             
   187  11.9296875 MiB   0.0000000 MiB   		restricted_options = set()
   188  11.9296875 MiB   0.0000000 MiB   		for sec_index in range(sec_min,sec_min+3):
   189  11.9296875 MiB   0.0000000 MiB   			restricted_options |= self.find_options_for(
   190  11.9296875 MiB   0.0000000 MiB   					selected, sec_index, pri_dir)
   191                             
   192                             		# get the other (row/col) of cubes that share this cubes (row/col)
   193  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s", self)
   194  11.9296875 MiB   0.0000000 MiB   		for p in ifilter(lambda i: i < sec_min or i > sec_min+2, range(9)):
   195  11.9296875 MiB   0.0000000 MiB   			square = sec_dir[p][selected]
   196  11.9296875 MiB   0.0000000 MiB   			if not square:
   197  11.9296875 MiB   0.0000000 MiB   				d =  "cols" if (pri_dir == self.rows) else "rows"
   198  11.9296875 MiB   0.0000000 MiB   				log.debug("Removing %s from %s %d" % (
   199  11.9296875 MiB   0.0000000 MiB   						restricted_options, d, selected))
   200  11.9296875 MiB   0.0000000 MiB   				square.options -= restricted_options
   201  11.9296875 MiB   0.0000000 MiB   				if square.check():
   202  11.9296875 MiB   0.0000000 MiB   					solved_count += 1
   203  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   178  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   179                             	def _update_options(self, pri_dir, sec_dir, selected, pri_min, sec_min):
   180                             		"""
   181                             		Helper function for find_isolated_lines.  Updates the options for other
   182                             		rows/cols aligned with the isolated row/col that was identified by
   183                             		find_isolated_lines.
   184                             		"""
   185  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   186                             
   187  11.9296875 MiB   0.0000000 MiB   		restricted_options = set()
   188  11.9296875 MiB   0.0000000 MiB   		for sec_index in range(sec_min,sec_min+3):
   189  11.9296875 MiB   0.0000000 MiB   			restricted_options |= self.find_options_for(
   190  11.9296875 MiB   0.0000000 MiB   					selected, sec_index, pri_dir)
   191                             
   192                             		# get the other (row/col) of cubes that share this cubes (row/col)
   193  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s", self)
   194  11.9296875 MiB   0.0000000 MiB   		for p in ifilter(lambda i: i < sec_min or i > sec_min+2, range(9)):
   195  11.9296875 MiB   0.0000000 MiB   			square = sec_dir[p][selected]
   196  11.9296875 MiB   0.0000000 MiB   			if not square:
   197                             				d =  "cols" if (pri_dir == self.rows) else "rows"
   198                             				log.debug("Removing %s from %s %d" % (
   199                             						restricted_options, d, selected))
   200                             				square.options -= restricted_options
   201                             				if square.check():
   202                             					solved_count += 1
   203  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164  11.9296875 MiB   0.0000000 MiB   					solitary_rows.add(r)
   165  11.9296875 MiB   0.0000000 MiB   					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168  11.9296875 MiB   0.0000000 MiB   			solved_count += self._update_options(self.rows, self.cols, 
   169  11.9296875 MiB   0.0000000 MiB   					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172  11.9296875 MiB   0.0000000 MiB   			solved_count += self._update_options(self.cols, self.rows, 
   173  11.9296875 MiB   0.0000000 MiB   					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   178  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   179                             	def _update_options(self, pri_dir, sec_dir, selected, pri_min, sec_min):
   180                             		"""
   181                             		Helper function for find_isolated_lines.  Updates the options for other
   182                             		rows/cols aligned with the isolated row/col that was identified by
   183                             		find_isolated_lines.
   184                             		"""
   185  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   186                             
   187  11.9296875 MiB   0.0000000 MiB   		restricted_options = set()
   188  11.9296875 MiB   0.0000000 MiB   		for sec_index in range(sec_min,sec_min+3):
   189  11.9296875 MiB   0.0000000 MiB   			restricted_options |= self.find_options_for(
   190  11.9296875 MiB   0.0000000 MiB   					selected, sec_index, pri_dir)
   191                             
   192                             		# get the other (row/col) of cubes that share this cubes (row/col)
   193  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s", self)
   194  11.9296875 MiB   0.0000000 MiB   		for p in ifilter(lambda i: i < sec_min or i > sec_min+2, range(9)):
   195  11.9296875 MiB   0.0000000 MiB   			square = sec_dir[p][selected]
   196  11.9296875 MiB   0.0000000 MiB   			if not square:
   197  11.9296875 MiB   0.0000000 MiB   				d =  "cols" if (pri_dir == self.rows) else "rows"
   198  11.9296875 MiB   0.0000000 MiB   				log.debug("Removing %s from %s %d" % (
   199  11.9296875 MiB   0.0000000 MiB   						restricted_options, d, selected))
   200  11.9296875 MiB   0.0000000 MiB   				square.options -= restricted_options
   201  11.9296875 MiB   0.0000000 MiB   				if square.check():
   202                             					solved_count += 1
   203  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   178  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   179                             	def _update_options(self, pri_dir, sec_dir, selected, pri_min, sec_min):
   180                             		"""
   181                             		Helper function for find_isolated_lines.  Updates the options for other
   182                             		rows/cols aligned with the isolated row/col that was identified by
   183                             		find_isolated_lines.
   184                             		"""
   185  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   186                             
   187  11.9296875 MiB   0.0000000 MiB   		restricted_options = set()
   188  11.9296875 MiB   0.0000000 MiB   		for sec_index in range(sec_min,sec_min+3):
   189  11.9296875 MiB   0.0000000 MiB   			restricted_options |= self.find_options_for(
   190  11.9296875 MiB   0.0000000 MiB   					selected, sec_index, pri_dir)
   191                             
   192                             		# get the other (row/col) of cubes that share this cubes (row/col)
   193  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s", self)
   194  11.9296875 MiB   0.0000000 MiB   		for p in ifilter(lambda i: i < sec_min or i > sec_min+2, range(9)):
   195  11.9296875 MiB   0.0000000 MiB   			square = sec_dir[p][selected]
   196  11.9296875 MiB   0.0000000 MiB   			if not square:
   197  11.9296875 MiB   0.0000000 MiB   				d =  "cols" if (pri_dir == self.rows) else "rows"
   198  11.9296875 MiB   0.0000000 MiB   				log.debug("Removing %s from %s %d" % (
   199  11.9296875 MiB   0.0000000 MiB   						restricted_options, d, selected))
   200  11.9296875 MiB   0.0000000 MiB   				square.options -= restricted_options
   201  11.9296875 MiB   0.0000000 MiB   				if square.check():
   202                             					solved_count += 1
   203  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164  11.9296875 MiB   0.0000000 MiB   					solitary_rows.add(r)
   165  11.9296875 MiB   0.0000000 MiB   					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168  11.9296875 MiB   0.0000000 MiB   			solved_count += self._update_options(self.rows, self.cols, 
   169  11.9296875 MiB   0.0000000 MiB   					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172  11.9296875 MiB   0.0000000 MiB   			solved_count += self._update_options(self.cols, self.rows, 
   173  11.9296875 MiB   0.0000000 MiB   					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164  11.9296875 MiB   0.0000000 MiB   					solitary_rows.add(r)
   165  11.9296875 MiB   0.0000000 MiB   					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   178  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   179                             	def _update_options(self, pri_dir, sec_dir, selected, pri_min, sec_min):
   180                             		"""
   181                             		Helper function for find_isolated_lines.  Updates the options for other
   182                             		rows/cols aligned with the isolated row/col that was identified by
   183                             		find_isolated_lines.
   184                             		"""
   185  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   186                             
   187  11.9296875 MiB   0.0000000 MiB   		restricted_options = set()
   188  11.9296875 MiB   0.0000000 MiB   		for sec_index in range(sec_min,sec_min+3):
   189  11.9296875 MiB   0.0000000 MiB   			restricted_options |= self.find_options_for(
   190  11.9296875 MiB   0.0000000 MiB   					selected, sec_index, pri_dir)
   191                             
   192                             		# get the other (row/col) of cubes that share this cubes (row/col)
   193  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s", self)
   194  11.9296875 MiB   0.0000000 MiB   		for p in ifilter(lambda i: i < sec_min or i > sec_min+2, range(9)):
   195  11.9296875 MiB   0.0000000 MiB   			square = sec_dir[p][selected]
   196  11.9296875 MiB   0.0000000 MiB   			if not square:
   197  11.9296875 MiB   0.0000000 MiB   				d =  "cols" if (pri_dir == self.rows) else "rows"
   198  11.9296875 MiB   0.0000000 MiB   				log.debug("Removing %s from %s %d" % (
   199  11.9296875 MiB   0.0000000 MiB   						restricted_options, d, selected))
   200  11.9296875 MiB   0.0000000 MiB   				square.options -= restricted_options
   201  11.9296875 MiB   0.0000000 MiB   				if square.check():
   202  11.9296875 MiB   0.0000000 MiB   					solved_count += 1
   203  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164  11.9296875 MiB   0.0000000 MiB   					solitary_rows.add(r)
   165  11.9296875 MiB   0.0000000 MiB   					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172  11.9296875 MiB   0.0000000 MiB   			solved_count += self._update_options(self.cols, self.rows, 
   173  11.9296875 MiB   0.0000000 MiB   					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   178  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   179                             	def _update_options(self, pri_dir, sec_dir, selected, pri_min, sec_min):
   180                             		"""
   181                             		Helper function for find_isolated_lines.  Updates the options for other
   182                             		rows/cols aligned with the isolated row/col that was identified by
   183                             		find_isolated_lines.
   184                             		"""
   185  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   186                             
   187  11.9296875 MiB   0.0000000 MiB   		restricted_options = set()
   188  11.9296875 MiB   0.0000000 MiB   		for sec_index in range(sec_min,sec_min+3):
   189  11.9296875 MiB   0.0000000 MiB   			restricted_options |= self.find_options_for(
   190  11.9296875 MiB   0.0000000 MiB   					selected, sec_index, pri_dir)
   191                             
   192                             		# get the other (row/col) of cubes that share this cubes (row/col)
   193  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s", self)
   194  11.9296875 MiB   0.0000000 MiB   		for p in ifilter(lambda i: i < sec_min or i > sec_min+2, range(9)):
   195  11.9296875 MiB   0.0000000 MiB   			square = sec_dir[p][selected]
   196  11.9296875 MiB   0.0000000 MiB   			if not square:
   197  11.9296875 MiB   0.0000000 MiB   				d =  "cols" if (pri_dir == self.rows) else "rows"
   198  11.9296875 MiB   0.0000000 MiB   				log.debug("Removing %s from %s %d" % (
   199  11.9296875 MiB   0.0000000 MiB   						restricted_options, d, selected))
   200  11.9296875 MiB   0.0000000 MiB   				square.options -= restricted_options
   201  11.9296875 MiB   0.0000000 MiB   				if square.check():
   202                             					solved_count += 1
   203  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   178  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   179                             	def _update_options(self, pri_dir, sec_dir, selected, pri_min, sec_min):
   180                             		"""
   181                             		Helper function for find_isolated_lines.  Updates the options for other
   182                             		rows/cols aligned with the isolated row/col that was identified by
   183                             		find_isolated_lines.
   184                             		"""
   185  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   186                             
   187  11.9296875 MiB   0.0000000 MiB   		restricted_options = set()
   188  11.9296875 MiB   0.0000000 MiB   		for sec_index in range(sec_min,sec_min+3):
   189  11.9296875 MiB   0.0000000 MiB   			restricted_options |= self.find_options_for(
   190  11.9296875 MiB   0.0000000 MiB   					selected, sec_index, pri_dir)
   191                             
   192                             		# get the other (row/col) of cubes that share this cubes (row/col)
   193  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s", self)
   194  11.9296875 MiB   0.0000000 MiB   		for p in ifilter(lambda i: i < sec_min or i > sec_min+2, range(9)):
   195  11.9296875 MiB   0.0000000 MiB   			square = sec_dir[p][selected]
   196  11.9296875 MiB   0.0000000 MiB   			if not square:
   197  11.9296875 MiB   0.0000000 MiB   				d =  "cols" if (pri_dir == self.rows) else "rows"
   198  11.9296875 MiB   0.0000000 MiB   				log.debug("Removing %s from %s %d" % (
   199  11.9296875 MiB   0.0000000 MiB   						restricted_options, d, selected))
   200  11.9296875 MiB   0.0000000 MiB   				square.options -= restricted_options
   201  11.9296875 MiB   0.0000000 MiB   				if square.check():
   202  11.9296875 MiB   0.0000000 MiB   					solved_count += 1
   203  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164  11.9296875 MiB   0.0000000 MiB   					solitary_rows.add(r)
   165  11.9296875 MiB   0.0000000 MiB   					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168  11.9296875 MiB   0.0000000 MiB   			solved_count += self._update_options(self.rows, self.cols, 
   169  11.9296875 MiB   0.0000000 MiB   					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172  11.9296875 MiB   0.0000000 MiB   			solved_count += self._update_options(self.cols, self.rows, 
   173  11.9296875 MiB   0.0000000 MiB   					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164  11.9296875 MiB   0.0000000 MiB   					solitary_rows.add(r)
   165  11.9296875 MiB   0.0000000 MiB   					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   178  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   179                             	def _update_options(self, pri_dir, sec_dir, selected, pri_min, sec_min):
   180                             		"""
   181                             		Helper function for find_isolated_lines.  Updates the options for other
   182                             		rows/cols aligned with the isolated row/col that was identified by
   183                             		find_isolated_lines.
   184                             		"""
   185  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   186                             
   187  11.9296875 MiB   0.0000000 MiB   		restricted_options = set()
   188  11.9296875 MiB   0.0000000 MiB   		for sec_index in range(sec_min,sec_min+3):
   189  11.9296875 MiB   0.0000000 MiB   			restricted_options |= self.find_options_for(
   190  11.9296875 MiB   0.0000000 MiB   					selected, sec_index, pri_dir)
   191                             
   192                             		# get the other (row/col) of cubes that share this cubes (row/col)
   193  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s", self)
   194  11.9296875 MiB   0.0000000 MiB   		for p in ifilter(lambda i: i < sec_min or i > sec_min+2, range(9)):
   195  11.9296875 MiB   0.0000000 MiB   			square = sec_dir[p][selected]
   196  11.9296875 MiB   0.0000000 MiB   			if not square:
   197  11.9296875 MiB   0.0000000 MiB   				d =  "cols" if (pri_dir == self.rows) else "rows"
   198  11.9296875 MiB   0.0000000 MiB   				log.debug("Removing %s from %s %d" % (
   199  11.9296875 MiB   0.0000000 MiB   						restricted_options, d, selected))
   200  11.9296875 MiB   0.0000000 MiB   				square.options -= restricted_options
   201  11.9296875 MiB   0.0000000 MiB   				if square.check():
   202  11.9296875 MiB   0.0000000 MiB   					solved_count += 1
   203  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   178  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   179                             	def _update_options(self, pri_dir, sec_dir, selected, pri_min, sec_min):
   180                             		"""
   181                             		Helper function for find_isolated_lines.  Updates the options for other
   182                             		rows/cols aligned with the isolated row/col that was identified by
   183                             		find_isolated_lines.
   184                             		"""
   185  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   186                             
   187  11.9296875 MiB   0.0000000 MiB   		restricted_options = set()
   188  11.9296875 MiB   0.0000000 MiB   		for sec_index in range(sec_min,sec_min+3):
   189  11.9296875 MiB   0.0000000 MiB   			restricted_options |= self.find_options_for(
   190  11.9296875 MiB   0.0000000 MiB   					selected, sec_index, pri_dir)
   191                             
   192                             		# get the other (row/col) of cubes that share this cubes (row/col)
   193  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s", self)
   194  11.9296875 MiB   0.0000000 MiB   		for p in ifilter(lambda i: i < sec_min or i > sec_min+2, range(9)):
   195  11.9296875 MiB   0.0000000 MiB   			square = sec_dir[p][selected]
   196  11.9296875 MiB   0.0000000 MiB   			if not square:
   197                             				d =  "cols" if (pri_dir == self.rows) else "rows"
   198                             				log.debug("Removing %s from %s %d" % (
   199                             						restricted_options, d, selected))
   200                             				square.options -= restricted_options
   201                             				if square.check():
   202                             					solved_count += 1
   203  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164  11.9296875 MiB   0.0000000 MiB   					solitary_rows.add(r)
   165  11.9296875 MiB   0.0000000 MiB   					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168  11.9296875 MiB   0.0000000 MiB   			solved_count += self._update_options(self.rows, self.cols, 
   169  11.9296875 MiB   0.0000000 MiB   					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172  11.9296875 MiB   0.0000000 MiB   			solved_count += self._update_options(self.cols, self.rows, 
   173  11.9296875 MiB   0.0000000 MiB   					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270  11.9296875 MiB   0.0000000 MiB   			for option_square in options:
   271  11.9296875 MiB   0.0000000 MiB   				if square.options == option_square.options:
   272  11.9296875 MiB   0.0000000 MiB   					log.debug("Adding %s to pairs." % (square.options))
   273  11.9296875 MiB   0.0000000 MiB   					pairs.append((square, option_square))
   274  11.9296875 MiB   0.0000000 MiB   					break
   275                             			else:
   276  11.9296875 MiB   0.0000000 MiB   				log.debug("Adding %s to options." % (square.options))
   277  11.9296875 MiB   0.0000000 MiB   				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281  11.9296875 MiB   0.0000000 MiB   			remove_options = items[0].options
   282  11.9296875 MiB   0.0000000 MiB   			for square in self.get_cube(row_min, col_min, self.rows):
   283  11.9296875 MiB   0.0000000 MiB   				if square or square is items[0] or square is items[1]:
   284  11.9296875 MiB   0.0000000 MiB   					continue
   285  11.9296875 MiB   0.0000000 MiB   				log.debug("Removing %s from square in cube (%d,%s)" % (
   286  11.9296875 MiB   0.0000000 MiB   							remove_options, row_min, col_min))
   287  11.9296875 MiB   0.0000000 MiB   				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270  11.9296875 MiB   0.0000000 MiB   			for option_square in options:
   271  11.9296875 MiB   0.0000000 MiB   				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276  11.9296875 MiB   0.0000000 MiB   				log.debug("Adding %s to options." % (square.options))
   277  11.9296875 MiB   0.0000000 MiB   				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270  11.9296875 MiB   0.0000000 MiB   			for option_square in options:
   271  11.9296875 MiB   0.0000000 MiB   				if square.options == option_square.options:
   272  11.9296875 MiB   0.0000000 MiB   					log.debug("Adding %s to pairs." % (square.options))
   273  11.9296875 MiB   0.0000000 MiB   					pairs.append((square, option_square))
   274  11.9296875 MiB   0.0000000 MiB   					break
   275                             			else:
   276  11.9296875 MiB   0.0000000 MiB   				log.debug("Adding %s to options." % (square.options))
   277  11.9296875 MiB   0.0000000 MiB   				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281  11.9296875 MiB   0.0000000 MiB   			remove_options = items[0].options
   282  11.9296875 MiB   0.0000000 MiB   			for square in self.get_cube(row_min, col_min, self.rows):
   283  11.9296875 MiB   0.0000000 MiB   				if square or square is items[0] or square is items[1]:
   284  11.9296875 MiB   0.0000000 MiB   					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270  11.9296875 MiB   0.0000000 MiB   			for option_square in options:
   271  11.9296875 MiB   0.0000000 MiB   				if square.options == option_square.options:
   272  11.9296875 MiB   0.0000000 MiB   					log.debug("Adding %s to pairs." % (square.options))
   273  11.9296875 MiB   0.0000000 MiB   					pairs.append((square, option_square))
   274  11.9296875 MiB   0.0000000 MiB   					break
   275                             			else:
   276  11.9296875 MiB   0.0000000 MiB   				log.debug("Adding %s to options." % (square.options))
   277  11.9296875 MiB   0.0000000 MiB   				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281  11.9296875 MiB   0.0000000 MiB   			remove_options = items[0].options
   282  11.9296875 MiB   0.0000000 MiB   			for square in self.get_cube(row_min, col_min, self.rows):
   283  11.9296875 MiB   0.0000000 MiB   				if square or square is items[0] or square is items[1]:
   284  11.9296875 MiB   0.0000000 MiB   					continue
   285  11.9296875 MiB   0.0000000 MiB   				log.debug("Removing %s from square in cube (%d,%s)" % (
   286  11.9296875 MiB   0.0000000 MiB   							remove_options, row_min, col_min))
   287  11.9296875 MiB   0.0000000 MiB   				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   248  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   249                             	def check_board(self):
   250                             		"""
   251                             		Check all squares for completion.
   252                             		"""
   253  11.9296875 MiB   0.0000000 MiB   		((s.check() for s in r) for r in self.rows)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   216  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   217                             	def solved(self):
   218                             		" Returns true when the puzzle is complete "
   219  11.9296875 MiB   0.0000000 MiB   		good_set = set(range(1,10))
   220  11.9296875 MiB   0.0000000 MiB   		for r in self.rows:
   221  11.9296875 MiB   0.0000000 MiB   			if set(r) != good_set:
   222  11.9296875 MiB   0.0000000 MiB   				return False
   223                             		for c in self.cols:
   224                             			if set(c) != good_set:
   225                             				return False
   226                             		for r in range(0,9,3):
   227                             			for c in range(0,9,3):
   228                             				if set(self.get_cube(r,c, self.rows)) != good_set:
   229                             					return False
   230                             		return True


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   232  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   233                             	def get_status(self):
   234                             		"""
   235                             		Return a status tuple which represents the current state of the board
   236                             		being solved. The tuple is in the form (num_solved_squares, num_options).
   237                             		"""
   238  11.9296875 MiB   0.0000000 MiB   		total_solved = 0
   239  11.9296875 MiB   0.0000000 MiB   		total_options = 0
   240                             		
   241  11.9296875 MiB   0.0000000 MiB   		for r in self.rows:
   242  11.9296875 MiB   0.0000000 MiB   			for s in r:
   243  11.9296875 MiB   0.0000000 MiB   				total_solved += int(bool(s))
   244  11.9296875 MiB   0.0000000 MiB   				total_options += len(s.options)
   245  11.9296875 MiB   0.0000000 MiB   		return (total_solved, total_options)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145  11.9296875 MiB   0.0000000 MiB   				return options
   146                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145                             				return options
   146  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145  11.9296875 MiB   0.0000000 MiB   				return options
   146                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52                             			self.value = self.options.pop() 
    53                             			return True
    54  11.9296875 MiB   0.0000000 MiB   		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   130  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   131                             	def identify_only_possibility(self, r, c):
   132                             		"""
   133                             		Determines if one of the options for this square is the only possibility
   134                             		for that option in a row, column, or cube. Making it the correct option.
   135                             		"""
   136  11.9296875 MiB   0.0000000 MiB   		target = self.rows[r][c]
   137                             
   138  11.9296875 MiB   0.0000000 MiB   		for related_list in (self.rows[r], self.cols[c], 
   139  11.9296875 MiB   0.0000000 MiB   				self.get_cube(r, c, self.rows)):
   140  11.9296875 MiB   0.0000000 MiB   			others_options = set()
   141  11.9296875 MiB   0.0000000 MiB   			for square in ifilterfalse(lambda s: s is target, related_list):
   142  11.9296875 MiB   0.0000000 MiB   				others_options |= set(square.options)
   143  11.9296875 MiB   0.0000000 MiB   			options = target.options - others_options
   144  11.9296875 MiB   0.0000000 MiB   			if len(options) == 1:
   145  11.9296875 MiB   0.0000000 MiB   				return options
   146                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   178  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   179                             	def _update_options(self, pri_dir, sec_dir, selected, pri_min, sec_min):
   180                             		"""
   181                             		Helper function for find_isolated_lines.  Updates the options for other
   182                             		rows/cols aligned with the isolated row/col that was identified by
   183                             		find_isolated_lines.
   184                             		"""
   185  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   186                             
   187  11.9296875 MiB   0.0000000 MiB   		restricted_options = set()
   188  11.9296875 MiB   0.0000000 MiB   		for sec_index in range(sec_min,sec_min+3):
   189  11.9296875 MiB   0.0000000 MiB   			restricted_options |= self.find_options_for(
   190  11.9296875 MiB   0.0000000 MiB   					selected, sec_index, pri_dir)
   191                             
   192                             		# get the other (row/col) of cubes that share this cubes (row/col)
   193  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s", self)
   194  11.9296875 MiB   0.0000000 MiB   		for p in ifilter(lambda i: i < sec_min or i > sec_min+2, range(9)):
   195  11.9296875 MiB   0.0000000 MiB   			square = sec_dir[p][selected]
   196  11.9296875 MiB   0.0000000 MiB   			if not square:
   197                             				d =  "cols" if (pri_dir == self.rows) else "rows"
   198                             				log.debug("Removing %s from %s %d" % (
   199                             						restricted_options, d, selected))
   200                             				square.options -= restricted_options
   201                             				if square.check():
   202                             					solved_count += 1
   203  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164  11.9296875 MiB   0.0000000 MiB   					solitary_rows.add(r)
   165  11.9296875 MiB   0.0000000 MiB   					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168  11.9296875 MiB   0.0000000 MiB   			solved_count += self._update_options(self.rows, self.cols, 
   169  11.9296875 MiB   0.0000000 MiB   					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   178  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   179                             	def _update_options(self, pri_dir, sec_dir, selected, pri_min, sec_min):
   180                             		"""
   181                             		Helper function for find_isolated_lines.  Updates the options for other
   182                             		rows/cols aligned with the isolated row/col that was identified by
   183                             		find_isolated_lines.
   184                             		"""
   185  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   186                             
   187  11.9296875 MiB   0.0000000 MiB   		restricted_options = set()
   188  11.9296875 MiB   0.0000000 MiB   		for sec_index in range(sec_min,sec_min+3):
   189  11.9296875 MiB   0.0000000 MiB   			restricted_options |= self.find_options_for(
   190  11.9296875 MiB   0.0000000 MiB   					selected, sec_index, pri_dir)
   191                             
   192                             		# get the other (row/col) of cubes that share this cubes (row/col)
   193  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s", self)
   194  11.9296875 MiB   0.0000000 MiB   		for p in ifilter(lambda i: i < sec_min or i > sec_min+2, range(9)):
   195  11.9296875 MiB   0.0000000 MiB   			square = sec_dir[p][selected]
   196  11.9296875 MiB   0.0000000 MiB   			if not square:
   197                             				d =  "cols" if (pri_dir == self.rows) else "rows"
   198                             				log.debug("Removing %s from %s %d" % (
   199                             						restricted_options, d, selected))
   200                             				square.options -= restricted_options
   201                             				if square.check():
   202                             					solved_count += 1
   203  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164  11.9296875 MiB   0.0000000 MiB   					solitary_rows.add(r)
   165  11.9296875 MiB   0.0000000 MiB   					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168  11.9296875 MiB   0.0000000 MiB   			solved_count += self._update_options(self.rows, self.cols, 
   169  11.9296875 MiB   0.0000000 MiB   					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270  11.9296875 MiB   0.0000000 MiB   			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276  11.9296875 MiB   0.0000000 MiB   				log.debug("Adding %s to options." % (square.options))
   277  11.9296875 MiB   0.0000000 MiB   				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270  11.9296875 MiB   0.0000000 MiB   			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276  11.9296875 MiB   0.0000000 MiB   				log.debug("Adding %s to options." % (square.options))
   277  11.9296875 MiB   0.0000000 MiB   				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   248  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   249                             	def check_board(self):
   250                             		"""
   251                             		Check all squares for completion.
   252                             		"""
   253  11.9296875 MiB   0.0000000 MiB   		((s.check() for s in r) for r in self.rows)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   216  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   217                             	def solved(self):
   218                             		" Returns true when the puzzle is complete "
   219  11.9296875 MiB   0.0000000 MiB   		good_set = set(range(1,10))
   220  11.9296875 MiB   0.0000000 MiB   		for r in self.rows:
   221  11.9296875 MiB   0.0000000 MiB   			if set(r) != good_set:
   222  11.9296875 MiB   0.0000000 MiB   				return False
   223                             		for c in self.cols:
   224                             			if set(c) != good_set:
   225                             				return False
   226                             		for r in range(0,9,3):
   227                             			for c in range(0,9,3):
   228                             				if set(self.get_cube(r,c, self.rows)) != good_set:
   229                             					return False
   230                             		return True


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   232  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   233                             	def get_status(self):
   234                             		"""
   235                             		Return a status tuple which represents the current state of the board
   236                             		being solved. The tuple is in the form (num_solved_squares, num_options).
   237                             		"""
   238  11.9296875 MiB   0.0000000 MiB   		total_solved = 0
   239  11.9296875 MiB   0.0000000 MiB   		total_options = 0
   240                             		
   241  11.9296875 MiB   0.0000000 MiB   		for r in self.rows:
   242  11.9296875 MiB   0.0000000 MiB   			for s in r:
   243  11.9296875 MiB   0.0000000 MiB   				total_solved += int(bool(s))
   244  11.9296875 MiB   0.0000000 MiB   				total_options += len(s.options)
   245  11.9296875 MiB   0.0000000 MiB   		return (total_solved, total_options)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31  11.9296875 MiB   0.0000000 MiB   			return self.value == other.value
    32                             		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   114  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   115                             	def find_options_for(self, r, c, index):
   116                             		"""
   117                             		Return a list of possible options for a square on the board. Checks
   118                             		the row, column, and cube for existing numbers. 
   119                             		"""
   120                             		
   121  11.9296875 MiB   0.0000000 MiB   		other_index = self.cols if index == self.rows else self.rows
   122                             
   123  11.9296875 MiB   0.0000000 MiB   		options = index[r][c].options
   124  11.9296875 MiB   0.0000000 MiB   		options -= set(index[r])
   125  11.9296875 MiB   0.0000000 MiB   		options -= set(other_index[c])
   126  11.9296875 MiB   0.0000000 MiB   		options -= set(self.get_cube(r, c, index))
   127  11.9296875 MiB   0.0000000 MiB   		return options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    49  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    50                             	def check(self):
    51  11.9296875 MiB   0.0000000 MiB   		if len(self.options) == 1:
    52  11.9296875 MiB   0.0000000 MiB   			self.value = self.options.pop() 
    53  11.9296875 MiB   0.0000000 MiB   			return True
    54                             		return False


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    45  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    46                             	def set(self, options):
    47  11.9296875 MiB   0.0000000 MiB   		self.options = options
    48  11.9296875 MiB   0.0000000 MiB   		return self.check()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    39  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    40                             	def __nonzero__(self):
    41  11.9296875 MiB   0.0000000 MiB   		return bool(self.value)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   149  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   150                             	def find_isolation_lines(self, row_min, col_min):
   151                             		"""
   152                             		Given a coordinate in a cube, find any isolated rows or column which 
   153                             		restrict an option to that row or column.  Then remove that number as 
   154                             		an option from any other cubes that are aligned with this cube.
   155                             		"""
   156  11.9296875 MiB   0.0000000 MiB   		solitary_rows = set()
   157  11.9296875 MiB   0.0000000 MiB   		solitary_cols = set()
   158                             
   159  11.9296875 MiB   0.0000000 MiB   		solved_count = 0
   160                             
   161  11.9296875 MiB   0.0000000 MiB   		for r in range(row_min, row_min+3):
   162  11.9296875 MiB   0.0000000 MiB   			for c in range(col_min, col_min+3):
   163  11.9296875 MiB   0.0000000 MiB   				if not self.rows[r][c]:	
   164                             					solitary_rows.add(r)
   165                             					solitary_cols.add(c)
   166                             			
   167  11.9296875 MiB   0.0000000 MiB   		if len(solitary_rows) == 1:
   168                             			solved_count += self._update_options(self.rows, self.cols, 
   169                             					solitary_rows.pop(), row_min, col_min)
   170                             			
   171  11.9296875 MiB   0.0000000 MiB   		if len(solitary_cols) == 1:
   172                             			solved_count += self._update_options(self.cols, self.rows, 
   173                             					solitary_cols.pop(), col_min, row_min)
   174                             
   175  11.9296875 MiB   0.0000000 MiB   		return solved_count


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   101  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   102                             	def show_options(self):
   103                             		" return a representation of the board based on the options per square "
   104  11.9296875 MiB   0.0000000 MiB   		s = ""
   105  11.9296875 MiB   0.0000000 MiB   		row_string = "[%9s] [%9s] [%9s]   " * 3 + "\n"
   106  11.9296875 MiB   0.0000000 MiB   		for i in range(9):
   107  11.9296875 MiB   0.0000000 MiB   			r = self.rows[i]
   108  11.9296875 MiB   0.0000000 MiB   			s += row_string % tuple(
   109  11.9296875 MiB   0.0000000 MiB   					[("%s" * len(s.options)) % tuple(s.options) for s in r])
   110  11.9296875 MiB   0.0000000 MiB   			if i % 3 ==  2:
   111  11.9296875 MiB   0.0000000 MiB   				s += "\n"
   112  11.9296875 MiB   0.0000000 MiB   		return s


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   256  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   257                             	def find_number_pairs_in_cube(self, row_min, col_min):
   258                             		"""
   259                             		If two numbers are options in only two places within a cube, then all
   260                             		other options in that square should be removed, and other items checked.
   261                             		"""
   262  11.9296875 MiB   0.0000000 MiB   		options = []
   263  11.9296875 MiB   0.0000000 MiB   		pairs = []
   264  11.9296875 MiB   0.0000000 MiB   		log.debug("Current state of game board:\n%s\n%s", 
   265  11.9296875 MiB   0.0000000 MiB   				self, self.show_options())
   266  11.9296875 MiB   0.0000000 MiB   		for square in self.get_cube(row_min, col_min, self.rows):
   267  11.9296875 MiB   0.0000000 MiB   			if len(square.options) != 2:
   268  11.9296875 MiB   0.0000000 MiB   				continue
   269                             
   270                             			for option_square in options:
   271                             				if square.options == option_square.options:
   272                             					log.debug("Adding %s to pairs." % (square.options))
   273                             					pairs.append((square, option_square))
   274                             					break
   275                             			else:
   276                             				log.debug("Adding %s to options." % (square.options))
   277                             				options.append(square)
   278                             
   279                             		# now remove this options from other squares in the cube
   280  11.9296875 MiB   0.0000000 MiB   		for items in pairs:
   281                             			remove_options = items[0].options
   282                             			for square in self.get_cube(row_min, col_min, self.rows):
   283                             				if square or square is items[0] or square is items[1]:
   284                             					continue
   285                             				log.debug("Removing %s from square in cube (%d,%s)" % (
   286                             							remove_options, row_min, col_min))
   287                             				square.options -= remove_options


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   248  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   249                             	def check_board(self):
   250                             		"""
   251                             		Check all squares for completion.
   252                             		"""
   253  11.9296875 MiB   0.0000000 MiB   		((s.check() for s in r) for r in self.rows)


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   206  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   207                             	def get_cube(self, r, c, index):
   208                             		" Return the local cube of 9 squares for a given row and column, as a list. "
   209  11.9296875 MiB   0.0000000 MiB   		row_min = r / 3 * 3
   210  11.9296875 MiB   0.0000000 MiB   		col_min = c / 3 * 3
   211  11.9296875 MiB   0.0000000 MiB   		cube = list(chain(
   212  11.9296875 MiB   0.0000000 MiB   			*(r[col_min:col_min+3] for r in index[row_min:row_min+3])))
   213  11.9296875 MiB   0.0000000 MiB   		return cube


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    36  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    37                             	def __hash__(self):
    38  11.9296875 MiB   0.0000000 MiB   		return self.value


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    28  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    29                             	def __eq__(self, other):
    30  11.9296875 MiB   0.0000000 MiB   		if hasattr(other, 'value'):
    31                             			return self.value == other.value
    32  11.9296875 MiB   0.0000000 MiB   		return self.value == other


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   216  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
   217                             	def solved(self):
   218                             		" Returns true when the puzzle is complete "
   219  11.9296875 MiB   0.0000000 MiB   		good_set = set(range(1,10))
   220  11.9296875 MiB   0.0000000 MiB   		for r in self.rows:
   221  11.9296875 MiB   0.0000000 MiB   			if set(r) != good_set:
   222                             				return False
   223  11.9296875 MiB   0.0000000 MiB   		for c in self.cols:
   224  11.9296875 MiB   0.0000000 MiB   			if set(c) != good_set:
   225                             				return False
   226  11.9296875 MiB   0.0000000 MiB   		for r in range(0,9,3):
   227  11.9296875 MiB   0.0000000 MiB   			for c in range(0,9,3):
   228  11.9296875 MiB   0.0000000 MiB   				if set(self.get_cube(r,c, self.rows)) != good_set:
   229                             					return False
   230  11.9296875 MiB   0.0000000 MiB   		return True


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
   323  11.9296875 MiB  11.9296875 MiB   @profile(precision=7,stream=fp)
   324                             def solve(board, print_cycle=10, guess=False):
   325                             	" Solve the puzzle "
   326                             
   327  11.9296875 MiB   0.0000000 MiB   	prev_status = None
   328  11.9296875 MiB   0.0000000 MiB   	saved_board = None
   329                             
   330  11.9296875 MiB   0.0000000 MiB   	counter = 0
   331                             
   332  11.9296875 MiB   0.0000000 MiB   	while True:
   333  11.9296875 MiB   0.0000000 MiB   		for (r, c, square) in board.all_squares():
   334                             			# skip solved squares
   335  11.9296875 MiB   0.0000000 MiB   			if square:
   336  11.9296875 MiB   0.0000000 MiB   				continue
   337  11.9296875 MiB   0.0000000 MiB   			if square.set(board.find_options_for(r, c, board.rows)):
   338  11.9296875 MiB   0.0000000 MiB   				log.info("found %s,%s through find_options" % (r,c))
   339  11.9296875 MiB   0.0000000 MiB   				continue
   340  11.9296875 MiB   0.0000000 MiB   			option = board.identify_only_possibility(r, c)
   341  11.9296875 MiB   0.0000000 MiB   			if option:
   342  11.9296875 MiB   0.0000000 MiB   				log.info("found %s,%s through identify_only" % (r,c))
   343  11.9296875 MiB   0.0000000 MiB   				square.set(option)
   344                             
   345  11.9296875 MiB   0.0000000 MiB   		for (r, c) in board.all_cubes():
   346  11.9296875 MiB   0.0000000 MiB   			solved = board.find_isolation_lines(r, c)
   347  11.9296875 MiB   0.0000000 MiB   			if solved:
   348  11.9296875 MiB   0.0000000 MiB   				log.debug("Current state of game board:\n%", board)
   349  11.9296875 MiB   0.0000000 MiB   				log.debug(board.show_options())
   350  11.9296875 MiB   0.0000000 MiB   				log.info("found %d using find_isolation_lines." % solved)
   351                             
   352  11.9296875 MiB   0.0000000 MiB   		for (r, c) in board.all_cubes():
   353  11.9296875 MiB   0.0000000 MiB   			board.find_number_pairs_in_cube(r, c)
   354                             	
   355  11.9296875 MiB   0.0000000 MiB   		board.check_board()
   356                             
   357  11.9296875 MiB   0.0000000 MiB   		counter += 1
   358  11.9296875 MiB   0.0000000 MiB   		if board.solved():
   359  11.9296875 MiB   0.0000000 MiB   			print "Solved in %d rounds." % counter
   360  11.9296875 MiB   0.0000000 MiB   			return board
   361                             
   362  11.9296875 MiB   0.0000000 MiB   		status = board.get_status()
   363  11.9296875 MiB   0.0000000 MiB   		if status == prev_status:
   364                             			if guess:
   365                             				return None
   366                             
   367                             			# time to guess
   368                             			(r, c) = find_unsolved_square(board)
   369                             			for choice in board.rows[r][c].options:
   370                             				log.info("Guessing %d for %d,%d" % (choice, r, c))
   371                             				new_board = deepcopy(board)
   372                             				new_board.rows[r][c].set(set([choice]))
   373                             				if solve(new_board, guess=True):
   374                             					return new_board
   375                             			print new_board
   376                             			print new_board.show_options()
   377                             			return None
   378                             
   379  11.9296875 MiB   0.0000000 MiB   		prev_status = status
   380                             
   381  11.9296875 MiB   0.0000000 MiB   		if counter % print_cycle == print_cycle - 1:
   382                             			print board
   383                             			print board.show_options()


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    42  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    43                             	def __repr__(self):
    44  11.9296875 MiB   0.0000000 MiB   		return "%r" % (self.value) if self.value else "_"


Filename: solver.py

Line #    Mem usage    Increment   Line Contents
================================================
    90  11.9296875 MiB  11.9296875 MiB   	@profile(precision=7,stream=fp)
    91                             	def __repr__(self):
    92                             		" return the board as a string "
    93  11.9296875 MiB   0.0000000 MiB   		s = ""
    94  11.9296875 MiB   0.0000000 MiB   		for r in range(9):
    95  11.9296875 MiB   0.0000000 MiB   			s += ("%s%s%s " * 3) % tuple("%s" % s for s in self.rows[r]) + "\n"
    96  11.9296875 MiB   0.0000000 MiB   			if r % 3 == 2:
    97  11.9296875 MiB   0.0000000 MiB   				s += "\n"
    98  11.9296875 MiB   0.0000000 MiB   		return s


